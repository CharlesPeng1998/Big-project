/*1751367 计2 彭健聪*/
#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <ctime>
#include <cmath>
#include <cstdio>
#include <conio.h>
#include <Windows.h>
#include "..\common\cmd_console_tools.h"
using namespace std;

const int LEVEL_L = 0;
const int LEVEL_M = 1;
const int LEVEL_Q = 2;
const int LEVEL_H = 3;

#define ver_1 0
#define ver_2 1
#define ver_3 2
#define ver_4 3
#define ver_5 4
#define ver_6 5
#define ver_7 6
#define ver_8 7
#define ver_9 8

#define COUNT_PART_LEN 8 /*字符计数符长度,由于只采用1-9版本的二进制编码模式
                         因此只需要使用8 bits长度的字符计数符*/

typedef struct tagRS_BLOCKINFO
{
	int ncRSBlock;		// 纠错块数
	int ncAllCodeWord;	// 块中的代码词数
	int ncDataCodeWord;	// 数据码词数（码字数-rs码字）

} RS_BLOCKINFO, *LPRS_BLOCKINFO;

/*二维码与版本相关参数结构体*/
typedef struct QR_code_version
{
	int version; //二维码版本号
	int total_word_num; //代码总词数
	int data_codewords_num[4]; //各纠错码级别的数据码最大容量（总码字-rs码字）

	int align_point_num; //疏模式坐标数
	int align_point[6]; //疏模式中心坐标

	RS_BLOCKINFO block_info1[4]; //RS块信息1
	RS_BLOCKINFO block_info2[4]; //rs块信息2
}QR_VERSIONINFO, *LPQR_VERSIONINFO;;

/*二维码类*/
class QR_code
{
private:
	char orig_text[101]; //用户输入的初始文本
	char *utf8_text; //原文本转化后的UTF8格式字符串
	int *encoded_data; //编码数据
	unsigned char *encoded_data_decimal; //编码数据（十进制）
	int version; //二维码版本编号
	int err_corre_level; //二维码纠错码级别
	int data_codewords_num; //最大容量
	int encoded_length; //二进制编码数据长度
	int data_decimal_length; //十进制编码数据长度
	int utf8_length; //转化为UTF8格式字符串后文本长度
	unsigned char m_byRSWork[153]; // rs 码字计算工作
	unsigned char *code_word_final; //最终二维码编码
	int code_word_final_num; //最终二维码编码词数
	int m_nSymbleSize;
	int code_matrix[53][53]; //最终二维码
	int QR_code_size; //二维码图形尺寸（边长）
	int mask_pattern; //二维码的掩模模式

	/*以下为额外测试数据*/
	int format_data;
public:
	int penalty; //掩模得分

public:
	~QR_code(); //析构函数，释放动态申请空间
	void set_err_corre_level(int n); //用户自定义输入二维码纠错级别
	void input_text(char *text); //用户输入初始文本
	void set_version(); //根据文本长度选择版本
	void encode(); //将文本进行编码
	void add_code(); //补码至最大容量
	void display(); //打印内容，调试用
	void binary_to_decimal();
	void add_code_data();
	void encode_rscode(LPBYTE datacode, int ncDataCodeWord, int ncRSCodeWord);
	void add_rs_code_data();
	void set_mask_pattern(int n);
	int CountPenalty();
	void print_QR_code();
	

	

	/*二维码填充*/
	void fill_matrix();
	void pos_detect_pattern(); //绘制位置探测图形
	void alignment(); //绘制对齐图形
	void timing_pattern(); //绘制定位图形
	void format_info(); //格式信息，顺便把小黑点画了
	void version_info(); //版本信息
	void code_words(); //填充数据区
	void masking(); //掩模


};

struct Pos
{
	int x;
	int y;
};

typedef unsigned short WORD;

typedef unsigned char BYTE;

typedef BYTE* LPBYTE;

typedef const char* LPCSTR;

/******全局函数原型******/
char *G2U(const char* gb2312);
/******全局函数原型******/

/*常量*/
const QR_VERSIONINFO QR_VersonInfo[] = { { 0 }, 
{ 1, // Ver.1
26,   19,   16,   13,    9,
0,   0,   0,   0,   0,   0,   0,
1,  26,  19,
1,  26,  16,
1,  26,  13,
1,  26,   9,
0,   0,   0,
0,   0,   0,
0,   0,   0,
0,   0,   0 },
{ 2, // Ver.2
44,   34,   28,   22,   16,
1,  18,   0,   0,   0,   0,   0,
1,  44,  34,
1,  44,  28,
1,  44,  22,
1,  44,  16,
0,   0,   0,
0,   0,   0,
0,   0,   0,
0,   0,   0 },
{ 3, // Ver.3
70,   55,   44,   34,   26,
1,  22,   0,   0,   0,   0,   0,
1,  70,  55,
1,  70,  44,
2,  35,  17,
2,  35,  13,
0,   0,   0,
0,   0,   0,
0,   0,   0,
0,   0,   0 },
{ 4, // Ver.4
100,   80,   64,   48,   36,
1,  26,   0,   0,   0,   0,   0,
1, 100,  80,
2,  50,  32,
2,  50,  24,
4,  25,   9,
0,   0,   0,
0,   0,   0,
0,   0,   0,
0,   0,   0 },
{ 5, // Ver.5
134,  108,   86,   62,   46,
1,  30,   0,   0,   0,   0,   0,
1, 134, 108,
2,  67,  43,
2,  33,  15,
2,  33,  11,
0,   0,   0,
0,   0,   0,
2,  34,  16,
2,  34,  12 },
{ 6, // Ver.6
172,  136,  108,   76,   60,
1,  34,   0,   0,   0,   0,   0,
2,  86,  68,
4,  43,  27,
4,  43,  19,
4,  43,  15,
0,   0,   0,
0,   0,   0,
0,   0,   0,
0,   0,   0 },
{ 7, // Ver.7
196,  156,  124,   88,   66,
2,  22,  38,   0,   0,   0,   0,
2,  98,  78,
4,  49,  31,
2,  32,  14,
4,  39,  13,
0,   0,   0,
0,   0,   0,
4,  33,  15,
1,  40,  14 },
{ 8, // Ver.8
242,  194,  154,  110,   86,
2,  24,  42,   0,   0,   0,   0,
2, 121,  97,
2,  60,  38,
4,  40,  18,
4,  40,  14,
0,   0,   0,
2,  61,  39,
2,  41,  19,
2,  41,  15 },
{ 9, // Ver.9
292,  232,  182,  132,  100,
2,  26,  46,   0,   0,   0,   0,
2, 146, 116,
3,  58,  36,
4,  36,  16,
4,  36,  12,
0,   0,   0,
2,  59,  37,
4,  37,  17,
4,  37,  13 } };

const BYTE byExpToInt[] = { 1,   2,   4,   8,  16,  32,  64, 128,  29,  58, 116, 232, 205, 135,  19,  38,
76, 152,  45,  90, 180, 117, 234, 201, 143,   3,   6,  12,  24,  48,  96, 192,
157,  39,  78, 156,  37,  74, 148,  53, 106, 212, 181, 119, 238, 193, 159,  35,
70, 140,   5,  10,  20,  40,  80, 160,  93, 186, 105, 210, 185, 111, 222, 161,
95, 190,  97, 194, 153,  47,  94, 188, 101, 202, 137,  15,  30,  60, 120, 240,
253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163,  91, 182, 113, 226,
217, 175,  67, 134,  17,  34,  68, 136,  13,  26,  52, 104, 208, 189, 103, 206,
129,  31,  62, 124, 248, 237, 199, 147,  59, 118, 236, 197, 151,  51, 102, 204,
133,  23,  46,  92, 184, 109, 218, 169,  79, 158,  33,  66, 132,  21,  42,  84,
168,  77, 154,  41,  82, 164,  85, 170,  73, 146,  57, 114, 228, 213, 183, 115,
230, 209, 191,  99, 198, 145,  63, 126, 252, 229, 215, 179, 123, 246, 241, 255,
227, 219, 171,  75, 150,  49,  98, 196, 149,  55, 110, 220, 165,  87, 174,  65,
130,  25,  50, 100, 200, 141,   7,  14,  28,  56, 112, 224, 221, 167,  83, 166,
81, 162,  89, 178, 121, 242, 249, 239, 195, 155,  43,  86, 172,  69, 138,   9,
18,  36,  72, 144,  61, 122, 244, 245, 247, 243, 251, 235, 203, 139,  11,  22,
44,  88, 176, 125, 250, 233, 207, 131,  27,  54, 108, 216, 173,  71, 142,   1 };

const BYTE byIntToExp[] = { 0,   0,   1,  25,   2,  50,  26, 198,   3, 223,  51, 238,  27, 104, 199,  75,
4, 100, 224,  14,  52, 141, 239, 129,  28, 193, 105, 248, 200,   8,  76, 113,
5, 138, 101,  47, 225,  36,  15,  33,  53, 147, 142, 218, 240,  18, 130,  69,
29, 181, 194, 125, 106,  39, 249, 185, 201, 154,   9, 120,  77, 228, 114, 166,
6, 191, 139,  98, 102, 221,  48, 253, 226, 152,  37, 179,  16, 145,  34, 136,
54, 208, 148, 206, 143, 150, 219, 189, 241, 210,  19,  92, 131,  56,  70,  64,
30,  66, 182, 163, 195,  72, 126, 110, 107,  58,  40,  84, 250, 133, 186,  61,
202,  94, 155, 159,  10,  21, 121,  43,  78, 212, 229, 172, 115, 243, 167,  87,
7, 112, 192, 247, 140, 128,  99,  13, 103,  74, 222, 237,  49, 197, 254,  24,
227, 165, 153, 119,  38, 184, 180, 124,  17,  68, 146, 217,  35,  32, 137,  46,
55,  63, 209,  91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190,  97,
242,  86, 211, 171,  20,  42,  93, 158, 132,  60,  57,  83,  71, 109,  65, 162,
31,  45,  67, 216, 183, 123, 164, 118, 196,  23,  73, 236, 127,  12, 111, 246,
108, 161,  59,  82,  41, 157,  85, 170, 251,  96, 134, 177, 187, 204,  62,  90,
203,  89,  95, 176, 156, 169, 160,  81,  11, 245,  22, 235, 122, 117,  44, 215,
79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168,  80,  88, 175 };

const BYTE byRSExp7[] = { 87, 229, 146, 149, 238, 102,  21 };
const BYTE byRSExp10[] = { 251,  67,  46,  61, 118,  70,  64,  94,  32,  45 };
const BYTE byRSExp13[] = { 74, 152, 176, 100,  86, 100, 106, 104, 130, 218, 206, 140,  78 };
const BYTE byRSExp15[] = { 8, 183,  61,  91, 202,  37,  51,  58,  58, 237, 140, 124,   5,  99, 105 };
const BYTE byRSExp16[] = { 120, 104, 107, 109, 102, 161,  76,   3,  91, 191, 147, 169, 182, 194, 225, 120 };
const BYTE byRSExp17[] = { 43, 139, 206,  78,  43, 239, 123, 206, 214, 147,  24,  99, 150,  39, 243, 163, 136 };
const BYTE byRSExp18[] = { 215, 234, 158,  94, 184,  97, 118, 170,  79, 187, 152, 148, 252, 179,   5,  98,  96, 153 };
const BYTE byRSExp20[] = { 17,  60,  79,  50,  61, 163,  26, 187, 202, 180, 221, 225,  83, 239, 156, 164, 212, 212, 188, 190 };
const BYTE byRSExp22[] = { 210, 171, 247, 242,  93, 230,  14, 109, 221,  53, 200,  74,   8, 172,  98,  80, 219, 134, 160, 105,
165, 231 };
const BYTE byRSExp24[] = { 229, 121, 135,  48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228, 218, 111,   0, 117, 232,
87,  96, 227,  21 };
const BYTE byRSExp26[] = { 173, 125, 158,   2, 103, 182, 118,  17, 145, 201, 111,  28, 165,  53, 161,  21, 245, 142,  13, 102,
48, 227, 153, 145, 218,  70 };
const BYTE byRSExp28[] = { 168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205,  27, 232, 201,  21,  43, 245,  87,
42, 195, 212, 119, 242,  37,   9, 123 };
const BYTE byRSExp30[] = { 41, 173, 145, 152, 216,  31, 179, 182,  50,  48, 110,  86, 239,  96, 222, 125,  42, 173, 226, 193,
224, 130, 156,  37, 251, 216, 238,  40, 192, 180 };
const BYTE byRSExp32[] = { 10,   6, 106, 190, 249, 167,   4,  67, 209, 138, 138,  32, 242, 123,  89,  27, 120, 185,  80, 156,
38,  69, 171,  60,  28, 222,  80,  52, 254, 185, 220, 241 };
const BYTE byRSExp34[] = { 111,  77, 146,  94,  26,  21, 108,  19, 105,  94, 113, 193,  86, 140, 163, 125,  58, 158, 229, 239,
218, 103,  56,  70, 114,  61, 183, 129, 167,  13,  98,  62, 129,  51 };
const BYTE byRSExp36[] = { 200, 183,  98,  16, 172,  31, 246, 234,  60, 152, 115,   0, 167, 152, 113, 248, 238, 107,  18,  63,
218,  37,  87, 210, 105, 177, 120,  74, 121, 196, 117, 251, 113, 233,  30, 120 };
const BYTE byRSExp38[] = { 159,  34,  38, 228, 230,  59, 243,  95,  49, 218, 176, 164,  20,  65,  45, 111,  39,  81,  49, 118,
113, 222, 193, 250, 242, 168, 217,  41, 164, 247, 177,  30, 238,  18, 120, 153,  60, 193 };
const BYTE byRSExp40[] = { 59, 116,  79, 161, 252,  98, 128, 205, 128, 161, 247,  57, 163,  56, 235, 106,  53,  26, 187, 174,
226, 104, 170,   7, 175,  35, 181, 114,  88,  41,  47, 163, 125, 134,  72,  20, 232,  53,  35,  15 };
const BYTE byRSExp42[] = { 250, 103, 221, 230,  25,  18, 137, 231,   0,   3,  58, 242, 221, 191, 110,  84, 230,   8, 188, 106,
96, 147,  15, 131, 139,  34, 101, 223,  39, 101, 213, 199, 237, 254, 201, 123, 171, 162, 194, 117,
50,  96 };
const BYTE byRSExp44[] = { 190,   7,  61, 121,  71, 246,  69,  55, 168, 188,  89, 243, 191,  25,  72, 123,   9, 145,  14, 247,
1, 238,  44,  78, 143,  62, 224, 126, 118, 114,  68, 163,  52, 194, 217, 147, 204, 169,  37, 130,
113, 102,  73, 181 };
const BYTE byRSExp46[] = { 112,  94,  88, 112, 253, 224, 202, 115, 187,  99,  89,   5,  54, 113, 129,  44,  58,  16, 135, 216,
169, 211,  36,   1,   4,  96,  60, 241,  73, 104, 234,   8, 249, 245, 119, 174,  52,  25, 157, 224,
43, 202, 223,  19,  82,  15 };
const BYTE byRSExp48[] = { 228,  25, 196, 130, 211, 146,  60,  24, 251,  90,  39, 102, 240,  61, 178,  63,  46, 123, 115,  18,
221, 111, 135, 160, 182, 205, 107, 206,  95, 150, 120, 184,  91,  21, 247, 156, 140, 238, 191,  11,
94, 227,  84,  50, 163,  39,  34, 108 };
const BYTE byRSExp50[] = { 232, 125, 157, 161, 164,   9, 118,  46, 209,  99, 203, 193,  35,   3, 209, 111, 195, 242, 203, 225,
46,  13,  32, 160, 126, 209, 130, 160, 242, 215, 242,  75,  77,  42, 189,  32, 113,  65, 124,  69,
228, 114, 235, 175, 124, 170, 215, 232, 133, 205 };
const BYTE byRSExp52[] = { 116,  50,  86, 186,  50, 220, 251,  89, 192,  46,  86, 127, 124,  19, 184, 233, 151, 215,  22,  14,
59, 145,  37, 242, 203, 134, 254,  89, 190,  94,  59,  65, 124, 113, 100, 233, 235, 121,  22,  76,
86,  97,  39, 242, 200, 220, 101,  33, 239, 254, 116,  51 };
const BYTE byRSExp54[] = { 183,  26, 201,  87, 210, 221, 113,  21,  46,  65,  45,  50, 238, 184, 249, 225, 102,  58, 209, 218,
109, 165,  26,  95, 184, 192,  52, 245,  35, 254, 238, 175, 172,  79, 123,  25, 122,  43, 120, 108,
215,  80, 128, 201, 235,   8, 153,  59, 101,  31, 198,  76,  31, 156 };
const BYTE byRSExp56[] = { 106, 120, 107, 157, 164, 216, 112, 116,   2,  91, 248, 163,  36, 201, 202, 229,   6, 144, 254, 155,
135, 208, 170, 209,  12, 139, 127, 142, 182, 249, 177, 174, 190,  28,  10,  85, 239, 184, 101, 124,
152, 206,  96,  23, 163,  61,  27, 196, 247, 151, 154, 202, 207,  20,  61,  10 };
const BYTE byRSExp58[] = { 82, 116,  26, 247,  66,  27,  62, 107, 252, 182, 200, 185, 235,  55, 251, 242, 210, 144, 154, 237,
176, 141, 192, 248, 152, 249, 206,  85, 253, 142,  65, 165, 125,  23,  24,  30, 122, 240, 214,   6,
129, 218,  29, 145, 127, 134, 206, 245, 117,  29,  41,  63, 159, 142, 233, 125, 148, 123 };
const BYTE byRSExp60[] = { 107, 140,  26,  12,   9, 141, 243, 197, 226, 197, 219,  45, 211, 101, 219, 120,  28, 181, 127,   6,
100, 247,   2, 205, 198,  57, 115, 219, 101, 109, 160,  82,  37,  38, 238,  49, 160, 209, 121,  86,
11, 124,  30, 181,  84,  25, 194,  87,  65, 102, 190, 220,  70,  27, 209,  16,  89,   7,  33, 240 };
const BYTE byRSExp62[] = { 65, 202, 113,  98,  71, 223, 248, 118, 214,  94,   0, 122,  37,  23,   2, 228,  58, 121,   7, 105,
135,  78, 243, 118,  70,  76, 223,  89,  72,  50,  70, 111, 194,  17, 212, 126, 181,  35, 221, 117,
235,  11, 229, 149, 147, 123, 213,  40, 115,   6, 200, 100,  26, 246, 182, 218, 127, 215,  36, 186,
110, 106 };
const BYTE byRSExp64[] = { 45,  51, 175,   9,   7, 158, 159,  49,  68, 119,  92, 123, 177, 204, 187, 254, 200,  78, 141, 149,
119,  26, 127,  53, 160,  93, 199, 212,  29,  24, 145, 156, 208, 150, 218, 209,   4, 216,  91,  47,
184, 146,  47, 140, 195, 195, 125, 242, 238,  63,  99, 108, 140, 230, 242,  31, 204,  11, 178, 243,
217, 156, 213, 231 };
const BYTE byRSExp66[] = { 5, 118, 222, 180, 136, 136, 162,  51,  46, 117,  13, 215,  81,  17, 139, 247, 197, 171,  95, 173,
65, 137, 178,  68, 111,  95, 101,  41,  72, 214, 169, 197,  95,   7,  44, 154,  77, 111, 236,  40,
121, 143,  63,  87,  80, 253, 240, 126, 217,  77,  34, 232, 106,  50, 168,  82,  76, 146,  67, 106,
171,  25, 132,  93,  45, 105 };
const BYTE byRSExp68[] = { 247, 159, 223,  33, 224,  93,  77,  70,  90, 160,  32, 254,  43, 150,  84, 101, 190, 205, 133,  52,
60, 202, 165, 220, 203, 151,  93,  84,  15,  84, 253, 173, 160,  89, 227,  52, 199,  97,  95, 231,
52, 177,  41, 125, 137, 241, 166, 225, 118,   2,  54,  32,  82, 215, 175, 198,  43, 238, 235,  27,
101, 184, 127,   3,   5,   8, 163, 238 };

const unsigned char * const byRSExp[] = { NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      byRSExp7,  NULL,      NULL,
byRSExp10, NULL,      NULL,      byRSExp13, NULL,      byRSExp15, byRSExp16, byRSExp17, byRSExp18, NULL,
byRSExp20, NULL,      byRSExp22, NULL,      byRSExp24, NULL,      byRSExp26, NULL,      byRSExp28, NULL,
byRSExp30, NULL,      byRSExp32, NULL,      byRSExp34, NULL,      byRSExp36, NULL,      byRSExp38, NULL,
byRSExp40, NULL,      byRSExp42, NULL,      byRSExp44, NULL,      byRSExp46, NULL,      byRSExp48, NULL,
byRSExp50, NULL,      byRSExp52, NULL,      byRSExp54, NULL,      byRSExp56, NULL,      byRSExp58, NULL,
byRSExp60, NULL,      byRSExp62, NULL,      byRSExp64, NULL,      byRSExp66, NULL,      byRSExp68 };
/*考虑到用户输入的文本长度不超过100字节，因此只需要考虑采用前9个版本的二维码*/






